/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
 /* tslint:disable */

import * as import0 from './ChartComponent';
import * as import1 from '@angular/core/src/change_detection/change_detection';
import * as import2 from '@angular/core/src/linker/view_utils';
import * as import3 from '@angular/core/src/linker/view';
import * as import4 from '@angular/core/src/render/api';
import * as import5 from '@angular/core/src/linker/element';
import * as import6 from './HighchartsService';
import * as import7 from '@angular/core/src/linker/query_list';
import * as import8 from '@angular/core/src/di/injector';
import * as import9 from '@angular/core/src/linker/view_type';
import * as import10 from '@angular/core/src/linker/element_ref';
import * as import11 from '@angular/core/src/metadata/view';
import * as import12 from '@angular/core/src/linker/component_factory';
export class Wrapper_ChartComponent {
  context:import0.ChartComponent;
  changed:boolean;
  /*private*/ _expr_0:any;
  /*private*/ _expr_1:any;
  constructor(p0:any,p1:any) {
    this.changed = false;
    this.context = new import0.ChartComponent(p0,p1);
    this._expr_0 = import1.UNINITIALIZED;
    this._expr_1 = import1.UNINITIALIZED;
  }
  check_type(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_0,currValue))) {
      this.changed = true;
      this.context.type = currValue;
      this._expr_0 = currValue;
    }
  }
  check_options(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._expr_1,currValue))) {
      this.changed = true;
      this.context.options = currValue;
      this._expr_1 = currValue;
    }
  }
  detectChangesInInputProps(view:import3.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this.changed;
    this.changed = false;
    return changed;
  }
  detectChangesInHostProps(view:import3.AppView<any>,el:any,throwOnChange:boolean):void {
  }
}
var renderType_ChartComponent_Host:import4.RenderComponentType = (null as any);
class _View_ChartComponent_Host0 extends import3.AppView<any> {
  _el_0:any;
  /*private*/ _appEl_0:import5.AppElement;
  _HighchartsService_0_4:import6.HighchartsService;
  _ChartComponent_0_5:Wrapper_ChartComponent;
  _query_ChartSeriesComponent_0_0:import7.QueryList<any>;
  _query_ChartXAxisComponent_0_1:import7.QueryList<any>;
  _query_ChartYAxisComponent_0_2:import7.QueryList<any>;
  constructor(viewUtils:import2.ViewUtils,parentInjector:import8.Injector,declarationEl:import5.AppElement) {
    super(_View_ChartComponent_Host0,renderType_ChartComponent_Host,import9.ViewType.HOST,viewUtils,parentInjector,declarationEl,import1.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import5.AppElement {
    this._el_0 = import2.selectOrCreateRenderHostElement(this.renderer,'chart',import2.EMPTY_INLINE_ARRAY,rootSelector,(null as any));
    this._appEl_0 = new import5.AppElement(0,(null as any),this,this._el_0);
    var compView_0:any = viewFactory_ChartComponent0(this.viewUtils,this.injector(0),this._appEl_0);
    this._HighchartsService_0_4 = new import6.HighchartsService();
    this._ChartComponent_0_5 = new Wrapper_ChartComponent(new import10.ElementRef(this._el_0),this._HighchartsService_0_4);
    this._query_ChartSeriesComponent_0_0 = new import7.QueryList<any>();
    this._query_ChartXAxisComponent_0_1 = new import7.QueryList<any>();
    this._query_ChartYAxisComponent_0_2 = new import7.QueryList<any>();
    this._appEl_0.initComponent(this._ChartComponent_0_5.context,([] as any[]),compView_0);
    this._query_ChartSeriesComponent_0_0.reset(([] as any[]));
    this._ChartComponent_0_5.context.series = this._query_ChartSeriesComponent_0_0.first;
    this._query_ChartXAxisComponent_0_1.reset(([] as any[]));
    this._ChartComponent_0_5.context.xAxis = this._query_ChartXAxisComponent_0_1.first;
    this._query_ChartYAxisComponent_0_2.reset(([] as any[]));
    this._ChartComponent_0_5.context.yAxis = this._query_ChartYAxisComponent_0_2.first;
    compView_0.create(this._ChartComponent_0_5.context,this.projectableNodes,(null as any));
    this.init(([] as any[]).concat([this._el_0]),[this._el_0],([] as any[]),([] as any[]));
    return this._appEl_0;
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import6.HighchartsService) && (0 === requestNodeIndex))) { return this._HighchartsService_0_4; }
    if (((token === import0.ChartComponent) && (0 === requestNodeIndex))) { return this._ChartComponent_0_5.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this._ChartComponent_0_5.detectChangesInInputProps(this,this._el_0,throwOnChange);
    this.detectContentChildrenChanges(throwOnChange);
    this._ChartComponent_0_5.detectChangesInHostProps(this,this._el_0,throwOnChange);
    this.detectViewChildrenChanges(throwOnChange);
    if (!throwOnChange) { if ((this.numberOfChecks === 0)) { this._ChartComponent_0_5.context.ngAfterViewInit(); } }
  }
}
function viewFactory_ChartComponent_Host0(viewUtils:import2.ViewUtils,parentInjector:import8.Injector,declarationEl:import5.AppElement):import3.AppView<any> {
  if ((renderType_ChartComponent_Host === (null as any))) { (renderType_ChartComponent_Host = viewUtils.createRenderComponentType('',0,import11.ViewEncapsulation.None,([] as any[]),{})); }
  return new _View_ChartComponent_Host0(viewUtils,parentInjector,declarationEl);
}
export const ChartComponentNgFactory:import12.ComponentFactory<import0.ChartComponent> = new import12.ComponentFactory<import0.ChartComponent>('chart',viewFactory_ChartComponent_Host0,import0.ChartComponent);
const styles_ChartComponent:any[] = ([] as any[]);
var renderType_ChartComponent:import4.RenderComponentType = (null as any);
class _View_ChartComponent0 extends import3.AppView<import0.ChartComponent> {
  constructor(viewUtils:import2.ViewUtils,parentInjector:import8.Injector,declarationEl:import5.AppElement) {
    super(_View_ChartComponent0,renderType_ChartComponent,import9.ViewType.COMPONENT,viewUtils,parentInjector,declarationEl,import1.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import5.AppElement {
    const parentRenderNode:any = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
    this.init(([] as any[]),([] as any[]),([] as any[]),([] as any[]));
    return (null as any);
  }
}
export function viewFactory_ChartComponent0(viewUtils:import2.ViewUtils,parentInjector:import8.Injector,declarationEl:import5.AppElement):import3.AppView<import0.ChartComponent> {
  if ((renderType_ChartComponent === (null as any))) { (renderType_ChartComponent = viewUtils.createRenderComponentType('',0,import11.ViewEncapsulation.None,styles_ChartComponent,{})); }
  return new _View_ChartComponent0(viewUtils,parentInjector,declarationEl);
}